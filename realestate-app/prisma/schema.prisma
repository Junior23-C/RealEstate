generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Property {
  id            String          @id @default(cuid())
  title         String
  description   String
  price         Float
  type          String
  status        String
  address       String
  city          String
  state         String
  zipCode       String
  bedrooms      Int
  bathrooms     Float
  squareFeet    Int
  lotSize       Float?
  yearBuilt     Int?
  features      String?
  rentedDate    DateTime?
  rentEndDate   DateTime?
  tenantName    String?
  tenantEmail   String?
  tenantPhone   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  inquiries     Inquiry[]
  images        PropertyImage[]
  leases        Lease[]
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  isPrimary  Boolean  @default(false)
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Inquiry {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  message    String
  propertyId String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactSettings {
  id            String   @id @default(cuid())
  companyName   String   @default("Aliaj Real Estate")
  email         String   @default("info@premiumestate.com")
  phone         String   @default("(555) 123-4567")
  address       String   @default("123 Main Street")
  city          String   @default("City")
  state         String   @default("State")
  zipCode       String   @default("12345")
  businessHours String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Tenant {
  id               String   @id @default(cuid())
  firstName        String
  lastName         String
  email            String   @unique
  phone            String
  dateOfBirth      DateTime?
  ssn              String?   // Last 4 digits only for security
  emergencyContact String?
  emergencyPhone   String?
  employer         String?
  monthlyIncome    Float?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  leases           Lease[]
}

model Lease {
  id                String     @id @default(cuid())
  propertyId        String
  tenantId          String
  startDate         DateTime
  endDate           DateTime
  monthlyRent       Float
  securityDeposit   Float?
  petDeposit        Float?
  lateFee           Float?     @default(50)
  rentDueDay        Int        @default(1)  // Day of month rent is due
  leaseDocument     String?    // Path to signed lease document
  status            String     @default("ACTIVE")  // ACTIVE, TERMINATED, EXPIRED
  notes             String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  property          Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant            Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  payments          Payment[]
  notifications     Notification[]
}

model Payment {
  id            String   @id @default(cuid())
  leaseId       String
  amount        Float
  dueDate       DateTime
  paidDate      DateTime?
  paymentMethod String?  // CASH, CHECK, BANK_TRANSFER, ONLINE
  checkNumber   String?
  lateFeePaid   Float?   @default(0)
  status        String   @default("PENDING")  // PENDING, PAID, OVERDUE, PARTIAL
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lease         Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  leaseId     String?
  type        String   // RENT_DUE, RENT_OVERDUE, LEASE_EXPIRING, MAINTENANCE
  title       String
  message     String
  scheduledFor DateTime
  sentAt      DateTime?
  method      String   @default("EMAIL")  // EMAIL, SMS, PUSH
  status      String   @default("PENDING")  // PENDING, SENT, FAILED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lease       Lease?   @relation(fields: [leaseId], references: [id], onDelete: Cascade)
}
